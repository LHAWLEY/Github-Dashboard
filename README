Your challenge is to create a dashboard that helps us make the right choice based on GitHub activity (GitHub API - https://developer.github.com/v3/). for the following frameworks:

React: https://github.com/facebook/react
Angular: https://github.com/angular/angular.js
Ember: https://github.com/emberjs/ember.js/
Vue: https://github.com/vuejs/vue
To really get a sense of how active development is on these frameworks, we need to be able to see updates to the dashboard without a page refresh. Please choose the 3 most relevant pieces of information from the following:

Watchers
Stars
Forks
Commits check
Pull requests
Issues
etcâ€¦
For this exercise, you can use any Javascript framework you would like (ex. Angular, Ember, React, Meteor, JQuery, Vue, etc...), but extra credit will be given for using Vanilla JS. (hint: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). We're not worried about custom visual design for this challenge, so feel free to keep it pretty basic. You can use any CSS framework, or roll your own CSS. Your submission will be judged based on:

Fulfilling the basic requirements above
Helping us choose the right framework
Code quality
Your overall thought process (add your notes to a Readme)

Thought Proces:

**
After thoroughly reviewing the activity and events API on github, I decided to use the statistics, issues, and pull request endpoints because I thought I could do more interesting visualizations and metrics with the information.

I decided to track the number of commits per week and display it in a histogram to visually show how many commits are made to each framework per week and what days the most commits were made in that particular week.  I chose to monitor when when an issue was reported because I think that is an indicator of how engaged users are with the framework. Finally I chose to monitor when the last pull request was updated because I feel like that shows how quickly the developers are to responding to input from users.  I think that these three metrics really help give an idea of how active the repo owners are and how involved users are with the repo.

My implementation is a Backbone-esque MVC pattern.  I think that this makes the code easier to review and find out how things are working together.

For updating, I decided to poll for simplicity.  There are a few issues: undefined occasionally shows up when a render occurs.  This could be fixed by placing the model fetch's in a $.when statement, but because this is not a production app, I thought this was fine to punt on.

**